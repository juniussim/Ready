{"version":3,"sources":["app.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAIA,sDAAsD;YAEtD,yHAAyH;YAmBzH;gBAYE,kBAAkB;gBAClB,sBAAoB,iBAAmC;oBAAnC,sBAAiB,GAAjB,iBAAiB,CAAkB;oBAZvD,qBAAqB;oBACrB,cAAS,GAAW,OAAO,CAAC;oBAY1B,+EAA+E;oBAC/E,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC;gBACtD,CAAC;gBAZD,mBAAmB;gBAEnB,oCAAa,GAAb;oBACE,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;oBAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAA;gBACrD,CAAC;gBA3BH;oBAAC,gBAAS,CAAC;wBACT,QAAQ,EAAE,eAAe;wBACzB,UAAU,EAAE,CAAC,gCAAc,CAAC;wBAC5B,SAAS,EAAE,CAAC,oCAAgB,CAAC;wBAC7B,QAAQ,EAAE,mUAWT;qBACF,CAAC;;gCAAA;gBA0BF,mBAAC;YAAD,CAxBA,AAwBC,IAAA;YAxBD,uCAwBC,CAAA","file":"app.component.js","sourcesContent":["// Import all of our dependencies\nimport {Component} from 'angular2/core';\nimport {IntroComponent} from './intro.component';\nimport {ClassroomService} from './classroom.service';\n// import {ChatService, Server} from './chat.service';\n\n// Use the @Component Decorator to define the following class as a component and provide the meta data including the view\n@Component({\n  selector: \"app-component\",\n  directives: [IntroComponent],\n  providers: [ClassroomService],\n  template: `\n  <div class=\"container\">\n    <div class=\"navPanel\">\n      <div class=\"navHeader\">{{navHeader}}</div>\n    </div>\n\n    <div class=\"bodyDiv\" [ngSwitch]=\"appRoutes\">\n      <intro  *ngSwitchWhen=\"'intro'\" class=\"intro\"></intro>\n    </div>\n    <div (click)=\"buttonClicked()\">hello</div>\n  </div>\n  `\n})\n\nexport class AppComponent{\n  // //CLASS PROPERTIES\n  navHeader: string = \"Ready\";\n  appRoutes: string\n  // server : Server;\n\n  buttonClicked(){\n    console.log(\"button works\")\n    this.appRoutes = this._classroomService.getRoutes()\n  }\n\n\n  // //CLASS METHODS\n  constructor(private _classroomService: ClassroomService) {\n    //one component is created grab a reference to the server from the Chat Service\n    this.appRoutes = this._classroomService.getRoutes();\n  }\n  //\n  // //decide what status message should be based upon connection\n  // statusMessage():string {\n  //     if (!this.server.loading && this.server.connected) return \"connected\"\n  //     if (!this.server.loading && !this.server.connected) return \"disconnected\"\n  //     return \"loading\"\n  // }\n}\n"],"sourceRoot":"/source/"}