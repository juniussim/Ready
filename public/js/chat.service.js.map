{"version":3,"sources":["chat.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;YAGA,mEAAmE;YACnE,4BAA4B;YAC5B,iDAAiD;YACjD,8DAA8D;YAC9D,uDAAuD;YACvD,+DAA+D;YAC/D,IAAI;YAEJ,sFAAsF;YAEtF;gBACE,kBAAkB;gBAClB,0BAA0B;gBAC1B,mBAAmB;gBACnB,sBAAsB;gBACtB,mBAAmB;gBACnB,eAAe;gBACf,IAAI;gBAEJ,6BAA6B;gBAC7B,eAAe;gBACf,wBAAwB;gBACxB,IAAI;gBACJ,iBAAiB;gBACjB,0BAA0B;gBAC1B,IAAI;gBAEJ,eAAe;gBACf;oBACE,wFAAwF;oBACxF,0CAA0C;oBAC1C,EAAE;oBACF,mBAAmB;oBACnB,gCAAgC;oBAChC,iEAAiE;oBACjE,oCAAoC;oBACpC,6CAA6C;oBAC7C,iCAAiC;oBACjC,kCAAkC;oBAClC,MAAM;oBACN,uCAAuC;oBACvC,kDAAkD;oBAClD,mCAAmC;oBACnC,gCAAgC;oBAChC,gEAAgE;oBAChE,8BAA8B;oBAC9B,MAAM;gBAER,CAAC;gBAvCH;oBAAC,iBAAU,EAAE;;oCAAA;gBA6Db,uBAAC;YAAD,CA5DA,AA4DC,IAAA;YA5DD,+CA4DC,CAAA","file":"chat.service.js","sourcesContent":["// Import all of our dependencies\nimport {Injectable} from 'angular2/core';\n\n// // Define the interfaces for the data types we are working with.\n// export interface Server {\n//   loading: boolean,   //has the service loaded\n//   connected: boolean, //has a socket connection established\n//   joined: boolean,    //has the user joined the chat\n//   online: string      //names of users currently in the chat\n// }\n\n// Use the @Injectable Decorator to define the following class as a injectable service\n@Injectable()\nexport class ClassRoomService {\n  //CLASS PROPERTIES\n  // const server:Server = {\n  //   loading: true,\n  //   connected: false,\n  //   joined: false,\n  //   online: \"\"\n  // }\n\n  //property accessor functions\n  // getServer(){\n  //   return this.server;\n  // }\n  // getMessages(){\n  //   return this.messages;\n  // }\n\n  //CLASS METHODS\n  constructor() {\n    //connect the socket.io client to our webserver (assuming it's running on the same port)\n    // this.socket = io(window.location.host);\n    //\n    // var self = this;\n    // // ADD SOCKET EVENT LISTENERS\n    // //handle connectting to and disconnecting from the chat server\n    // this.socket.on(\"connect\", () => {\n    //   console.log(\"Connected to Chat Socket\");\n    //   this.server.loading = false;\n    //   this.server.connected = true;\n    // });\n    // this.socket.on(\"disconnect\", () => {\n    //   console.log(\"Disconnected from Chat Socket\");\n    //   this.server.connected = false;\n    //   this.server.joined = false;\n    //   //set array length to 0 to empty the array of past messages\n    //   this.messages.length = 0;\n    // });\n\n  }\n\n  //handle form submission for joining the chat\n  // joinChat(name){\n  //   console.log(\"Joining chat with name: \", name);\n  //\n  //   this.user = { name: name }\n  //   this.socket.emit(\"join\", this.user );\n  // });\n  //\n  // //handle form submission for sending a chat message\n  // sendMessage(message) {\n  //   console.log(\"Sending message: \", message);\n  //   this.socket.emit(\"chat\", message );\n  //   //add user's own message to the message array\n  //   this.messages.unshift({\n  //     isStatus: false,\n  //     isOwn: true,\n  //     user: this.user.name,\n  //     message: message\n  //   });\n  // }\n}\n"],"sourceRoot":"/source/"}