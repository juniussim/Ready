{"version":3,"sources":["classroom.service.ts"],"names":[],"mappings":"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","file":"classroom.service.js","sourcesContent":["// Import all of our dependencies\nimport { Injectable } from 'angular2/core';\nimport { Router } from 'angular2/router';\nimport { Room, User, ErrorState } from './interface';\n// export interface Room {\n//   name: string,\n//   secretCode: string\n// }\n\n// Use the @Injectable Decorator to define the following class as a injectable service\n@Injectable()\nexport class ClassroomService {\n  socket;\n  room: Room;\n  user: User;\n  errorState: ErrorState;\n\n  getRoom() {\n    // console.log('look here',this.room)\n    return this.room;\n  }\n  getSecretCodeError() {\n    return this.errorState;\n  }\n\n  constructor(\n    private _router: Router\n  ) {\n    // ignore this silly error\n    //connect the socket.io client to our webserver (assuming it's running on the same port)\n    this.socket = io(window.location.host);\n\n    // ADD SOCKET EVENT LISTENERS\n    // We need this event listeners to be present the moment the component is created\n\n    // ================================== Instructor ==================================\n    this.socket.on('connect', () => {\n      console.log('Connected to Chat Socket');\n    });\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from Chat Socket');\n    });\n    this.socket.on('createSecretCode', (room) => {\n      console.log('Recieved Room Object:', room)\n      this.room = room;\n      this._router.navigate(['Instructor-dashboard']);\n    })\n\n    // ================================== Student ==================================\n\n    this.socket.on('secretCodeExist', (correctSecretCode) => {\n        // we want to do the room entry logic here\n        if (correctSecretCode) {\n          this.errorState = {secretCodeError: false};\n          this._router.navigate(['Student-dashboard']);\n        } else {\n          this.errorState = {secretCodeError: true};\n        }\n        console.log('status of correctSecretCode', correctSecretCode)\n    })\n\n  // end of constructor braces\n  }\n\n// Menu Component\n\n// Instructor ClassName Component\nsubmitClassName(className){\n  console.log('My class name is: ', className);\n  this.socket.emit('submitClassName', className );\n}\n// Instructor Dashboard Component\ncloseRoom(){\n  console.log('Closing Room: ', this.room);\n  this.socket.emit('closeRoom', this.room );\n  // we don't necessarily need this, what is the best practice\n  this.room = {\n    name: null,\n    secretCode: null,\n  };\n}\n\n// Student Profile Component\nsubmitProfileName(profileName){\n  console.log('My profile name is: ', profileName);\n  // console.log(this.user);\n  this.user = {name: profileName};\n  this.socket.emit('submitProfileName', profileName);\n}\n\n// Student Join Component\nsubmitSecretCode(secretCode){\n  console.log('Secret Code is: ', secretCode);\n  this.socket.emit('submitSecretCode', secretCode)\n}\n\n// End of Export ClassRoom Service\n}\n"],"sourceRoot":"/source/"}