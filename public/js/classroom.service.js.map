{"version":3,"sources":["classroom.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;YAGA,sFAAsF;YAEtF;gBAEE;oBACE,wFAAwF;oBACxF,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBAEvC,mBAAmB;oBACnB,gCAAgC;oBAChC,iEAAiE;oBACjE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE;wBACxB,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;oBAC1C,CAAC,CAAC,CAAC;oBACH,uCAAuC;oBACvC,kDAAkD;oBAClD,mCAAmC;oBACnC,gCAAgC;oBAChC,gEAAgE;oBAChE,8BAA8B;oBAC9B,MAAM;gBACR,CAAC;gBACD,kBAAkB;gBAClB,0BAA0B;gBAC1B,mBAAmB;gBACnB,sBAAsB;gBACtB,mBAAmB;gBACnB,eAAe;gBACf,IAAI;gBACJ,6BAA6B;gBAC7B,eAAe;gBACf,wBAAwB;gBACxB,IAAI;gBACJ,iBAAiB;gBACjB,0BAA0B;gBAC1B,IAAI;gBACJ,6CAA6C;gBAC7C,kBAAkB;gBAClB,mDAAmD;gBACnD,EAAE;gBACF,+BAA+B;gBAC/B,0CAA0C;gBAC1C,MAAM;gBACN,EAAE;gBACF,sDAAsD;gBACtD,yBAAyB;gBACzB,+CAA+C;gBAC/C,wCAAwC;gBACxC,kDAAkD;gBAClD,4BAA4B;gBAC5B,uBAAuB;gBACvB,mBAAmB;gBACnB,4BAA4B;gBAC5B,uBAAuB;gBACvB,QAAQ;gBACR,IAAI;gBAGN,iBAAiB;gBAEjB,8BAA8B;gBAC9B,0CAAe,GAAf,UAAgB,SAAS;oBACvB,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC;oBAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,SAAS,CAAE,CAAC;gBAClD,CAAC;gBA/DD;oBAAC,iBAAU,EAAE;;oCAAA;gBAmEb,uBAAC;YAAD,CAlEA,AAkEC,IAAA;YAlED,+CAkEC,CAAA","file":"classroom.service.js","sourcesContent":["// Import all of our dependencies\nimport {Injectable} from 'angular2/core';\n\n// Use the @Injectable Decorator to define the following class as a injectable service\n@Injectable()\nexport class ClassroomService {\n  socket;\n  constructor() {\n    //connect the socket.io client to our webserver (assuming it's running on the same port)\n    this.socket = io(window.location.host);\n\n    // var self = this;\n    // // ADD SOCKET EVENT LISTENERS\n    // //handle connectting to and disconnecting from the chat server\n    this.socket.on(\"connect\", () => {\n      console.log(\"Connected to Chat Socket\");\n    });\n    // this.socket.on(\"disconnect\", () => {\n    //   console.log(\"Disconnected from Chat Socket\");\n    //   this.server.connected = false;\n    //   this.server.joined = false;\n    //   //set array length to 0 to empty the array of past messages\n    //   this.messages.length = 0;\n    // });\n  }\n  //CLASS PROPERTIES\n  // const server:Server = {\n  //   loading: true,\n  //   connected: false,\n  //   joined: false,\n  //   online: \"\"\n  // }\n  //property accessor functions\n  // getServer(){\n  //   return this.server;\n  // }\n  // getMessages(){\n  //   return this.messages;\n  // }\n  //handle form submission for joining the chat\n  // joinChat(name){\n  //   console.log(\"Joining chat with name: \", name);\n  //\n  //   this.user = { name: name }\n  //   this.socket.emit(\"join\", this.user );\n  // });\n  //\n  // //handle form submission for sending a chat message\n  // sendMessage(message) {\n  //   console.log(\"Sending message: \", message);\n  //   this.socket.emit(\"chat\", message );\n  //   //add user's own message to the message array\n  //   this.messages.unshift({\n  //     isStatus: false,\n  //     isOwn: true,\n  //     user: this.user.name,\n  //     message: message\n  //   });\n  // }\n\n\n// Menu Component\n\n// Instructor Create Component\nsubmitClassName(className){\n  console.log(\"My class name is: \", className);\n  this.socket.emit(\"submitClassName\", className );\n}\n\n\n// End of Export ClassRoom Service\n}\n"],"sourceRoot":"/source/"}