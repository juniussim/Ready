{"version":3,"sources":["classroom.service.ts"],"names":[],"mappings":"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","file":"classroom.service.js","sourcesContent":["// Import all of our dependencies\nimport { Injectable } from 'angular2/core';\nimport { Router } from 'angular2/router';\nimport { Room, User, ErrorState, StudentConnections, TotalNumberOfReadyStudents, IsStudentReady } from './interface';\n// export interface Room {\n//   name: string,\n//   secretCode: string\n// }\n\n// Use the @Injectable Decorator to define the following class as a injectable service\n@Injectable()\nexport class ClassroomService {\n  socket;\n  // we might be able to refactor and remove this room property since each socket connection has a secret code in the server side which can be used to find the room\n  room: Room;\n  user: User;\n  // the reason why we use errorState as a object and not a boolean is because we want to take advantage of the reference vs copy concept\n  // when we reference a (service) object in a component, we are reference the object instead of copying it\n  // therefore when the (service) object changes, the component property immediately changes and the one way binding in student join component is immediately reflected.\n  errorState: ErrorState = {\n    secretCodeError: false\n  };\n\n  studentConnections: StudentConnections = {\n    number: 0\n  }\n\n  totalNumberOfReadyStudents: TotalNumberOfReadyStudents = {\n    number: 0\n  }\n\n  isStudentReady: IsStudentReady = {\n    status: false\n  }\n  // ================================== Accessor (Getter) Functions ==================================\n  // ================================== Instructor ==================================\n\n  getRoom() {\n    // console.log('look here',this.room)\n    return this.room;\n  }\n\n  getStudentConnections() {\n    return this.studentConnections;\n  }\n\n  // ================================== Students ==================================\n\n  getErrorState() {\n    console.log(this.errorState)\n    return this.errorState;\n  }\n\n  // ================================== Ready ==================================\n\n  getTotalNumberOfReadyStudents(){\n    return this.totalNumberOfReadyStudents;\n  }\n\n  getIsStudentReady(){\n    return this.isStudentReady;\n  }\n\n\n  constructor(\n    private _router: Router\n  ) {\n    // ignore this silly error\n    //connect the socket.io client to our webserver (assuming it's running on the same port)\n    this.socket = io(window.location.host);\n\n    // ADD SOCKET EVENT LISTENERS\n    // We need this event listeners to be present the moment the component is created\n\n    // ================================== Both Instructor & Students ==================================\n\n    this.socket.on('connect', () => {\n      console.log('Connected to Chat Socket');\n    });\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from Chat Socket');\n      // just in case navigation\n      this._router.navigate(['menu']);\n    });\n\n    // ================================== Instructor ==================================\n\n    this.socket.on('createSecretCode', (room) => {\n      console.log('Recieved Room Object:', room)\n      this.room = room;\n      this._router.navigate(['Instructor-dashboard']);\n    })\n    this.socket.on('updateNumberOfRoomConnections', (studentConnections) => {\n      console.log('Room connections changed, total number of students: ', studentConnections)\n      this.studentConnections.number = studentConnections;\n    })\n\n    // ================================== Student ==================================\n\n    this.socket.on('secretCodeExist', (correctSecretCodeWithObject) => {\n        // we want to do the room entry logic here\n        if (correctSecretCodeWithObject.secretCodeExist) {\n          this._router.navigate(['Student-dashboard']);\n          this.errorState.secretCodeError = false;\n          // =>> added this shit in when we were sleepy\n          this.room = correctSecretCodeWithObject.room;\n          \n        } else {\n          this.errorState.secretCodeError = true;\n        }\n        console.log('status of secretCodeError', this.errorState)\n    })\n\n    this.socket.on('startStudentReady', () => {\n      this._router.navigate(['Student-ready']);\n    })\n\n    this.socket.on('studentsCloseClass', () => {\n      this._router.navigate(['Menu']);\n      // when you close the class, you want to set the ready status back to false\n      this.isStudentReady.status = false;\n      this.totalNumberOfReadyStudents.number = 0;\n      // trying an alternative solution first\n      // this.studentConnections.number = 0\n    })\n\n    // ========================== Ready  =============================\n    this.socket.on('updateStudentReady', (totalNumberOfReadyStudents) => {\n      console.log(\"number of students are ready\", totalNumberOfReadyStudents);\n      this.totalNumberOfReadyStudents.number = totalNumberOfReadyStudents;\n    });\n\n    this.socket.on('RecievedYourLovelyReadyResponse', () => {\n      console.log('We received your lovely ready response my young padawan');\n      this.isStudentReady.status = true;\n    });\n\n    this.socket.on('RecievedYourLovelyNotReadyResponse', () => {\n      console.log('We received your lovely not ready response my young padawan');\n      this.isStudentReady.status = false;\n    });\n\n    this.socket.on('studentsEndReadySession', () => {\n      this._router.navigate(['Student-dashboard']);\n      this.isStudentReady.status = false;\n      this.totalNumberOfReadyStudents.number = 0;\n    })\n\n    //update total ready students (need to send to server?)\n\n\n  // end of constructor braces\n  }\n\n// Menu Component\n\n// Instructor ClassName Component\nsubmitClassName(className){\n  console.log('My class name is: ', className);\n  this.socket.emit('submitClassName', className );\n}\n// Instructor Dashboard Component\ninstructorCallReady(){\n  console.log(\"instructor pressed ARE YOU READY\")\n  this.socket.emit('instructorCallReady')\n}\ncloseClass(){\n  console.log('Closing Class: ');\n  this.socket.emit('closeClass');\n  // server sockets receive closeroom and then emits out to students to close their room as well\n\n  // considering not storing anything on the client side and removing room\n  // we don't necessarily need this because when someone joins the room in future, he would create a new room and the existing room stored on the client side will be overwritten\n  // this.room = {\n  //   name: null,\n  //   secretCode: null,\n  // };\n}\n\n// Instructor Ready Component\ninstructorEndsReadySession(){\n  this.socket.emit('instructorEndsReadySession')\n}\n\n// Student Profile Component\nsubmitProfileName(profileName){\n  console.log('My profile name is: ', profileName);\n  // console.log(this.user);\n  this.user = {name: profileName};\n  this.socket.emit('submitProfileName', profileName);\n}\n\n// Student Join Component\nsubmitSecretCode(secretCode){\n  console.log('Secret Code is: ', secretCode);\n  this.socket.emit('submitSecretCode', secretCode)\n}\n\n// Student Dashboard Component\nleaveClass(){\n  console.log(\"I'm leaving the class\");\n  this.socket.emit('studentLeaveClass')\n}\n\n\n// Student Ready Component\nstudentReady(){\n  console.log(\"student pressed i'm ready button\");\n  this.socket.emit('studentReady')\n}\nstudentNotReady(){\n  console.log(\"student changed to not ready\");\n  this.socket.emit('studentNotReady')\n}\n\n\n// End of Export ClassRoom Service\n}\n"],"sourceRoot":"/source/"}