{"version":3,"sources":["classroom.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;YAQA,sFAAsF;YAEtF;gBASE;oBATF,iBAsCC;oBA5BG,wFAAwF;oBACxF,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBAEvC,gCAAgC;oBAChC,iEAAiE;oBACjE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE;wBACxB,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;oBAC1C,CAAC,CAAC,CAAC;oBACH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE;wBAC3B,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;oBAC/C,CAAC,CAAC,CAAC;oBACH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,UAAC,IAAI;wBAChC,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAA;wBAC1C,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;wBACjB,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,KAAI,CAAC,IAAI,CAAC,CAAA;oBACrC,CAAC,CAAC,CAAA;gBACJ,CAAC;gBAtBD,kCAAO,GAAP;oBACE,qCAAqC;oBACrC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;gBACnB,CAAC;gBAqBH,iBAAiB;gBAEjB,8BAA8B;gBAC9B,0CAAe,GAAf,UAAgB,SAAS;oBACvB,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC;oBAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,SAAS,CAAE,CAAC;gBAClD,CAAC;gBAnCD;oBAAC,iBAAU,EAAE;;oCAAA;gBAuCb,uBAAC;YAAD,CAtCA,AAsCC,IAAA;YAtCD,+CAsCC,CAAA","file":"classroom.service.js","sourcesContent":["// Import all of our dependencies\nimport { Injectable } from 'angular2/core';\n// import { Room } from from './interface';\nexport interface Room {\n  name: string,\n  secretCode: string\n}\n\n// Use the @Injectable Decorator to define the following class as a injectable service\n@Injectable()\nexport class ClassroomService {\n  socket;\n  room: Room\n\n  getRoom() {\n    // console.log('look here',this.room)\n    return this.room;\n  }\n\n  constructor() {\n    //connect the socket.io client to our webserver (assuming it's running on the same port)\n    this.socket = io(window.location.host);\n\n    // // ADD SOCKET EVENT LISTENERS\n    // //handle connectting to and disconnecting from the chat server\n    this.socket.on('connect', () => {\n      console.log('Connected to Chat Socket');\n    });\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from Chat Socket');\n    });\n    this.socket.on('secretCode', (room) => {\n      console.log('Recieved Room Object:', room)\n      this.room = room;\n      console.log('look here', this.room)\n    })\n  }\n\n// Menu Component\n\n// Instructor Create Component\nsubmitClassName(className){\n  console.log(\"My class name is: \", className);\n  this.socket.emit(\"submitClassName\", className );\n}\n\n\n// End of Export ClassRoom Service\n}\n"],"sourceRoot":"/source/"}