{"version":3,"sources":["classroom.service.ts"],"names":[],"mappings":"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","file":"classroom.service.js","sourcesContent":["// Import all of our dependencies\nimport { Injectable } from 'angular2/core';\nimport { Router } from 'angular2/router';\nimport { Room, User, ErrorState, StudentConnections, TotalNumberOfReadyStudents } from './interface';\n// export interface Room {\n//   name: string,\n//   secretCode: string\n// }\n\n// Use the @Injectable Decorator to define the following class as a injectable service\n@Injectable()\nexport class ClassroomService {\n  socket;\n  room: Room;\n  user: User;\n  // the reason why we use errorState as a object and not a boolean is because we want to take advantage of the reference vs copy concept\n  // when we reference a (service) object in a component, we are reference the object instead of copying it\n  // therefore when the (service) object changes, the component property immediately changes and the one way binding in student join component is immediately reflected.\n  errorState: ErrorState = {\n    secretCodeError: false\n  };\n\n  studentConnections: StudentConnections = {\n    number: 0\n  }\n\n  totalNumberOfReadyStudents: TotalNumberOfReadyStudents = {\n    number: 0\n  }\n  // ================================== Accessor (Getter) Functions ==================================\n  // ================================== Instructor ==================================\n\n  getRoom() {\n    // console.log('look here',this.room)\n    return this.room;\n  }\n\n  getStudentConnections() {\n    return this.studentConnections;\n  }\n\n  // ================================== Students ==================================\n\n  getErrorState() {\n    console.log(this.errorState)\n    return this.errorState;\n  }\n\n  // ================================== Ready ==================================\n\n  getTotalNumberOfReadyStudents(){\n    return this.totalNumberOfReadyStudents;\n  }\n\n\n  constructor(\n    private _router: Router\n  ) {\n    // ignore this silly error\n    //connect the socket.io client to our webserver (assuming it's running on the same port)\n    this.socket = io(window.location.host);\n\n    // ADD SOCKET EVENT LISTENERS\n    // We need this event listeners to be present the moment the component is created\n\n    // ================================== Instructor ==================================\n    this.socket.on('connect', () => {\n      console.log('Connected to Chat Socket');\n    });\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from Chat Socket');\n    });\n    this.socket.on('createSecretCode', (room) => {\n      console.log('Recieved Room Object:', room)\n      this.room = room;\n      this._router.navigate(['Instructor-dashboard']);\n    })\n    this.socket.on('newStudentConnection', (studentConnections) => {\n      console.log('New student joined, total number of students: ', studentConnections)\n      this.studentConnections.number = studentConnections;\n    })\n\n    // ================================== Student ==================================\n\n    this.socket.on('secretCodeExist', (correctSecretCode) => {\n        // we want to do the room entry logic here\n        if (correctSecretCode) {\n          this._router.navigate(['Student-dashboard']);\n        } else {\n          this.errorState.secretCodeError = true;\n        }\n        console.log('status of secretCodeError', this.errorState)\n    })\n\n    this.socket.on('startStudentReady', () => {\n      this._router.navigate(['Student-ready']);\n    })\n\n    // ========================== Ready  =============================\n    this.socket.on('updateStudentReady', (totalNumberOfReadyStudents) => {\n      console.log(\"number of students are ready\", totalNumberOfReadyStudents);\n      this.totalNumberOfReadyStudents.number = totalNumberOfReadyStudents;\n    });\n\n    // this.socket.on('RecievedYourLovelyReadyResponse', () => {\n    //   console.log(\"number of students are ready\");\n    // });\n\n  // end of constructor braces\n  }\n\n// Menu Component\n\n// Instructor ClassName Component\nsubmitClassName(className){\n  console.log('My class name is: ', className);\n  this.socket.emit('submitClassName', className );\n}\n// Instructor Dashboard Component\ninstructorCallReady(){\n  console.log(\"instructor pressed ARE YOU READY\")\n  this.socket.emit('instructorCallReady')\n}\ncloseRoom(){\n  console.log('Closing Room: ', this.room);\n  this.socket.emit('closeRoom', this.room );\n  // we don't necessarily need this, what is the best practice\n  this.room = {\n    name: null,\n    secretCode: null,\n  };\n}\n// use the server to emit to all those in the room (excluding instructor) - use broadcast\n// and in the service (listen for an emit)\n// in the emit (reroute the student into student ready)\n\n// Student Profile Component\nsubmitProfileName(profileName){\n  console.log('My profile name is: ', profileName);\n  // console.log(this.user);\n  this.user = {name: profileName};\n  this.socket.emit('submitProfileName', profileName);\n}\n\n// Student Join Component\nsubmitSecretCode(secretCode){\n  console.log('Secret Code is: ', secretCode);\n  this.socket.emit('submitSecretCode', secretCode)\n}\n\n// Student Ready Component\nstudentReady(){\n  console.log(\"student pressed i'm ready button\");\n  this.socket.emit('studentReady')\n}\nstudentNotReady(){\n  // console.log('Secret Code is: ', secretCode);\n  // this.socket.emit('submitSecretCode', secretCode)\n}\n\n\n// End of Export ClassRoom Service\n}\n"],"sourceRoot":"/source/"}