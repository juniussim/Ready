{"version":3,"sources":["chart.directive.ts"],"names":[],"mappings":";;;;;;;YAiNA;gBACI,wBAAY,EAAc,EAAE,QAAkB;oBAC1C,oDAAoD;oBACpD,IAAI,IAAI,GAAG;wBACP,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;wBACxE,QAAQ,EAAE;4BACN;gCACI,KAAK,EAAE,kBAAkB;gCACzB,SAAS,EAAE,uBAAuB;gCAClC,WAAW,EAAE,qBAAqB;gCAClC,UAAU,EAAE,qBAAqB;gCACjC,gBAAgB,EAAE,MAAM;gCACxB,kBAAkB,EAAE,MAAM;gCAC1B,oBAAoB,EAAE,qBAAqB;gCAC3C,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;6BACrC;4BACD;gCACI,KAAK,EAAE,mBAAmB;gCAC1B,SAAS,EAAE,uBAAuB;gCAClC,WAAW,EAAE,qBAAqB;gCAClC,UAAU,EAAE,qBAAqB;gCACjC,gBAAgB,EAAE,MAAM;gCACxB,kBAAkB,EAAE,MAAM;gCAC1B,oBAAoB,EAAE,qBAAqB;gCAC3C,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;6BACrC;yBACJ;qBACJ,CAAC;oBACF,IAAI,GAAG,GAAQ,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBACjD,IAAI,SAAS,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC/B,4CAA4C;oBAC5C,yCAAyC;oBACzC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACxB,CAAC;gBACN,qBAAC;YAAD,CAlCA,AAkCC,IAAA;YAlCD,2CAkCC,CAAA","file":"chart.directive.js","sourcesContent":["import {Directive, ElementRef, Renderer, Input} from 'angular2/core';\n@Directive({\n    selector: '[chart]'\n})\n\ninterface ChartDataSet {\n    label: string;\n    fillColor: string;\n    strokeColor: string;\n\n    /* Line, Radar */\n    pointColor?: string;\n    pointStrokeColor?: string;\n    pointHighlightFill?: string;\n    pointHighlightStroke?: string;\n\n    /* Bar */\n    highlightFill?: string;\n    highlightStroke?: string;\n    data: number[];\n}\n\ninterface LinearChartData {\n    labels: string[];\n    datasets: ChartDataSet[];\n}\n\ninterface CircularChartData {\n    value: number;\n    color?: string;\n    highlight?: string;\n    label?: string;\n}\n\ninterface ChartSettings {\n    animation?: boolean;\n    animationSteps?: number;\n    animationEasing?: string;\n    showScale?: boolean;\n    scaleOverride?: boolean;\n    scaleSteps?: number;\n    scaleStepWidth?: number;\n    scaleStartValue?: number;\n    scaleLineColor?: string;\n    scaleLineWidth?: number;\n    scaleShowLabels?: boolean;\n    scaleLabel?: string;\n    scaleIntegersOnly?: boolean;\n    scaleBeginAtZero?: boolean;\n    scaleFontFamily?: string;\n    scaleFontSize?: number;\n    scaleFontStyle?: string;\n    scaleFontColor?: string;\n    responsive?: boolean;\n    maintainAspectRatio?: boolean;\n    showTooltips?: boolean;\n    tooltipEvents?: string[];\n    tooltipFillColor?: string;\n    tooltipFontFamily?: string;\n    tooltipFontSize?: number;\n    tooltipFontStyle?: string;\n    tooltipFontColor?: string;\n    tooltipTitleFontFamily?: string;\n    tooltipTitleFontSize?: number;\n    tooltipTitleFontStyle?: string;\n    tooltipTitleFontColor?: string;\n    tooltipYPadding?: number;\n    tooltipXPadding?: number;\n    tooltipCaretSize?: number;\n    tooltipCornerRadius?: number;\n    tooltipXOffset?: number;\n    tooltipTemplate?: string;\n    multiTooltipTemplate?: string;\n    onAnimationProgress?: () => any;\n    onAnimationComplete?: () => any;\n}\n\ninterface ChartOptions extends ChartSettings {\n    scaleShowGridLines?: boolean;\n    scaleGridLineColor?: string;\n    scaleGridLineWidth?: number;\n    scaleShowHorizontalLines?: boolean;\n    scaleShowVerticalLines?: boolean;\n    legendTemplate?: string;\n}\n\ninterface PointsAtEvent {\n    value: number;\n    label: string;\n    datasetLabel: string;\n    strokeColor: string;\n    fillColor: string;\n    highlightFill: string;\n    highlightStroke: string;\n    x: number;\n    y: number;\n}\n\ninterface ChartInstance {\n    clear: () => void;\n    stop: () => void;\n    resize: () => void;\n    destroy: () => void;\n    toBase64Image: () => string;\n    generateLegend: () => string;\n}\n\ninterface LinearInstance extends ChartInstance {\n    getPointsAtEvent: (event: Event) => PointsAtEvent[];\n    update: () => void;\n    addData: (valuesArray: number[], label: string) => void;\n    removeData: (index?: number) => void;\n}\n\ninterface CircularInstance extends ChartInstance {\n    getSegmentsAtEvent: (event: Event) => {}[];\n    update: () => void;\n    addData: (valuesArray: CircularChartData, index?: number) => void;\n    removeData: (index: number) => void;\n    segments: Array<CircularChartData>;\n}\n\ninterface LineChartOptions extends ChartOptions {\n    bezierCurve?: boolean;\n    bezierCurveTension?: number;\n    pointDot?: boolean;\n    pointDotRadius?: number;\n    pointDotStrokeWidth?: number;\n    pointHitDetectionRadius?: number;\n    datasetStroke?: boolean;\n    datasetStrokeWidth?: number;\n    datasetFill?: boolean;\n}\n\ninterface BarChartOptions extends ChartOptions {\n    scaleBeginAtZero?: boolean;\n    barShowStroke?: boolean;\n    barStrokeWidth?: number;\n    barValueSpacing?: number;\n    barDatasetSpacing?: number;\n}\n\ninterface RadarChartOptions extends ChartSettings {\n    scaleShowLine?: boolean;\n    angleShowLineOut?: boolean;\n    scaleShowLabels?: boolean;\n    scaleBeginAtZero?: boolean;\n    angleLineColor?: string;\n    angleLineWidth?: number;\n    pointLabelFontFamily?: string;\n    pointLabelFontStyle?: string;\n    pointLabelFontSize?: number;\n    pointLabelFontColor?: string;\n    pointDot?: boolean;\n    pointDotRadius?: number;\n    pointDotStrokeWidth?: number;\n    pointHitDetectionRadius?: number;\n    datasetStroke?: boolean;\n    datasetStrokeWidth?: number;\n    datasetFill?: boolean;\n    legendTemplate?: string;\n}\n\ninterface PolarAreaChartOptions extends ChartSettings {\n    scaleShowLabelBackdrop?: boolean;\n    scaleBackdropColor?: string;\n    scaleBeginAtZero?: boolean;\n    scaleBackdropPaddingY?: number;\n    scaleBackdropPaddingX?: number;\n    scaleShowLine?: boolean;\n    segmentShowStroke?: boolean;\n    segmentStrokeColor?: string;\n    segmentStrokeWidth?: number;\n    animationSteps?: number;\n    animationEasing?: string;\n    animateRotate?: boolean;\n    animateScale?: boolean;\n    legendTemplate?: string;\n}\n\ninterface PieChartOptions extends ChartSettings {\n    segmentShowStroke?: boolean;\n    segmentStrokeColor?: string;\n    segmentStrokeWidth?: number;\n    percentageInnerCutout?: number;\n    animationSteps?: number;\n    animationEasing?: string;\n    animateRotate?: boolean;\n    animateScale?: boolean;\n    legendTemplate?: string;\n}\n\ninterface Chart {\n    Line(data: LinearChartData, options?: LineChartOptions): LinearInstance;\n    Bar(data: LinearChartData, options?: BarChartOptions): LinearInstance;\n    Radar(data: LinearChartData, options?: RadarChartOptions): LinearInstance;\n\n    PolarArea(data: CircularChartData[], options?: PolarAreaChartOptions): CircularInstance;\n    Pie(data: CircularChartData[], options?: PieChartOptions): CircularInstance;\n    Doughnut(data: CircularChartData[], options?: PieChartOptions): CircularInstance;\n}\n\ndeclare var Chart: {\n    new (context: CanvasRenderingContext2D): Chart;\n    defaults: {\n        global: ChartSettings;\n    }\n};\n\nexport class ChartDirective {\n    constructor(el: ElementRef, renderer: Renderer) {\n        //el.nativeElement.style.backgroundColor = 'yellow';\n        var data = {\n            labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n            datasets: [\n                {\n                    label: \"My First dataset\",\n                    fillColor: \"rgba(220,220,220,0.2)\",\n                    strokeColor: \"rgba(220,220,220,1)\",\n                    pointColor: \"rgba(220,220,220,1)\",\n                    pointStrokeColor: \"#fff\",\n                    pointHighlightFill: \"#fff\",\n                    pointHighlightStroke: \"rgba(220,220,220,1)\",\n                    data: [65, 59, 80, 81, 56, 55, 40]\n                },\n                {\n                    label: \"My Second dataset\",\n                    fillColor: \"rgba(151,187,205,0.2)\",\n                    strokeColor: \"rgba(151,187,205,1)\",\n                    pointColor: \"rgba(151,187,205,1)\",\n                    pointStrokeColor: \"#fff\",\n                    pointHighlightFill: \"#fff\",\n                    pointHighlightStroke: \"rgba(151,187,205,1)\",\n                    data: [28, 48, 40, 19, 86, 27, 90]\n                }\n            ]\n        };\n        var ctx: any = el.nativeElement.getContext(\"2d\");\n        var lineChart = new Chart(ctx);\n        ////var lineChartOptions = areaChartOptions;\n        ////lineChartOptions.datasetFill = false;\n        lineChart.Line(data);\n     }\n}\n"],"sourceRoot":"/source/"}